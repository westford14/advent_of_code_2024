module(
    name = "advent-of-code-2024",
    repo_name = "com_github_westford14_advent_of_code_2024",
)

# We are using bzlmod because this is the _future_
# it is also much easier to handle and reason about than the old
# workspace files
# https://docs.bazel.build/versions/5.1.0/bzlmod.html

# MODULE.bazel file declares the modules dependencies and other metadata.

# Define all dependencies and their versions
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "gazelle", version = "0.40.0")
bazel_dep(name = "rules_proto", version = "7.0.2")
bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")
bazel_dep(name = "rules_buf", version = "0.3.0")
bazel_dep(name = "googleapis", version = "0.0.0-20240819-fe8ba054a")
bazel_dep(name = "protobuf", version = "28.3", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_shell", version = "0.3.0")

bazel_dep(
    name = "buildifier_prebuilt",
    version = "7.3.1",
    dev_dependency = True,
)

bazel_dep(name = "rules_oci", version = "2.0.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")

# Go setup
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = "1.23.3",
)
use_repo(go_sdk, "go_sdk")

# nogo is a tool that analyzes the source code of Go programs.
# It runs in an action after the Go compiler in the Bazel Go rules and rejects sources that contain disallowed coding patterns from the configured analyzers.
# https://github.com/bazel-contrib/rules_go/blob/master/go/nogo.rst
go_sdk.nogo(nogo = "//:nogo")

register_toolchains("@go_sdk//:all")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "com_github_grpc_ecosystem_grpc_gateway_v2", "com_github_spf13_cobra", "org_golang_google_genproto_googleapis_api", "org_golang_x_tools")

# We will be using buf for linting proto files and such
buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")

# Override the default version of buf
buf.toolchains(version = "v1.32.1")

# OCI is gives us rules to build and push images
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Define our base image(s)
# right now, we have very few dependencies, so we just use a distroless
# we can define more base images here if needed.
oci.pull(
    name = "go_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "go_base", "go_base_linux_amd64", "go_base_linux_arm64")
